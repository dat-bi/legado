Translate these Legado e-book app strings from Chinese to English.

**CONTEXT**: Legado is an Android e-book reader app with features like:
- Book sources management
- Reading interface customization  
- Text-to-speech (TTS)
- Import/Export functionality
- Web services

**REQUIREMENTS**:
- Natural English for mobile app users
- Keep CSV format exactly the same
- Fill in the "translation" column only
- Maintain placeholders like %s, %d, \n
- Use consistent terminology

**COMMON TERMS**:
- 阅读 = Reading
- 书源 = Book Sources
- 书架 = Bookshelf  
- 朗读 = Read Aloud
- 设置 = Settings

CSV Data:
id,type,file_path,line_number,string_name,original_text,translation,context,notes
5051,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,204,,将选择器前分隔字串分隔的字段依次压入数组,,) { //先匹配到st1pos，表明分隔字串不在选择器中，将选择器前分隔字串分隔的字段依次压入数组,Chinese parts: 将选择器前分隔字串分隔的字段依次压入数组
5052,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,206,,压入分隔的首段规则到数组,,"eue.substring(startX, end)) //压入分隔的首段规则到数组",Chinese parts: 压入分隔的首段规则到数组
5053,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,208,,设置组合类型,,".substring(end, end + step) //设置组合类型",Chinese parts: 设置组合类型
5054,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,209,,跳过分隔符,,pos = end + step //跳过分隔符,Chinese parts: 跳过分隔符
5055,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,211,,循环切分规则压入数组,,lementsType) && pos < st) { //循环切分规则压入数组,Chinese parts: 循环切分规则压入数组
5056,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,213,,跳过分隔符,,pos += step //跳过分隔符,Chinese parts: 跳过分隔符
5057,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,218,,首段已匹配,,"splitRule() //首段已匹配,但当前段匹配未完成,调用二段匹配",Chinese parts: 首段已匹配
5058,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,218,,但当前段匹配未完成,,"splitRule() //首段已匹配,但当前段匹配未完成,调用二段匹配",Chinese parts: 但当前段匹配未完成
5059,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,218,,调用二段匹配,,"splitRule() //首段已匹配,但当前段匹配未完成,调用二段匹配",Chinese parts: 调用二段匹配
5060,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,219,,执行到此,,} else { //执行到此，证明后面再无分隔字符,Chinese parts: 执行到此
5061,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,219,,证明后面再无分隔字符,,} else { //执行到此，证明后面再无分隔字符,Chinese parts: 证明后面再无分隔字符
5062,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,220,,将剩余字段压入数组末尾,,ule += queue.substring(pos) //将剩余字段压入数组末尾,Chinese parts: 将剩余字段压入数组末尾
5063,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,225,,位置推移到筛选器处,,pos = st //位置推移到筛选器处,Chinese parts: 位置推移到筛选器处
5064,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,226,,平衡组末尾字符,,e[pos] == '[') ']' else ')' //平衡组末尾字符,Chinese parts: 平衡组末尾字符
5065,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,229,,后未平衡,,"queue.substring(0, start) + ""后未平衡""",Chinese parts: 后未平衡
5066,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,230,,拉出一个筛选器,,") //拉出一个筛选器,不平衡则报错",Chinese parts: 拉出一个筛选器
5067,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,230,,不平衡则报错,,") //拉出一个筛选器,不平衡则报错",Chinese parts: 不平衡则报错
5068,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,234,,设置开始查找筛选器位置的起始位置,,start = pos //设置开始查找筛选器位置的起始位置,Chinese parts: 设置开始查找筛选器位置的起始位置
5069,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,236,,递归调用首段匹配,,return splitRule(* split) //递归调用首段匹配,Chinese parts: 递归调用首段匹配
5070,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,240,,二段匹配被调用,,"Rule(): ArrayList<String> { //二段匹配被调用,elementsType非空(已在首段赋值),直接按ele",Chinese parts: 二段匹配被调用
5071,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,240,,非空,,"ring> { //二段匹配被调用,elementsType非空(已在首段赋值),直接按elementsType查找,比首段",Chinese parts: 非空
5072,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,240,,已在首段赋值,,"g> { //二段匹配被调用,elementsType非空(已在首段赋值),直接按elementsType查找,比首段采用的方式更快",Chinese parts: 已在首段赋值
5073,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,240,,直接按,,"段匹配被调用,elementsType非空(已在首段赋值),直接按elementsType查找,比首段采用的方式更快",Chinese parts: 直接按
5074,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,240,,查找,,"Type非空(已在首段赋值),直接按elementsType查找,比首段采用的方式更快",Chinese parts: 查找
5075,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,240,,比首段采用的方式更快,,"e非空(已在首段赋值),直接按elementsType查找,比首段采用的方式更快",Chinese parts: 比首段采用的方式更快
5076,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,242,,记录分隔位置,,val end = pos //记录分隔位置,Chinese parts: 记录分隔位置
5077,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,243,,重回开始,,pos = start //重回开始，启动另一种查找,Chinese parts: 重回开始
5078,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,243,,启动另一种查找,,pos = start //重回开始，启动另一种查找,Chinese parts: 启动另一种查找
5079,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,246,,查找筛选器位置,,"al st = findToAny('[', '(') //查找筛选器位置",Chinese parts: 查找筛选器位置
5080,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,250,,压入分隔的首段规则到数组,,"eue.substring(startX, end)) //压入分隔的首段规则到数组",Chinese parts: 压入分隔的首段规则到数组
5081,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,251,,跳过分隔符,,pos = end + step //跳过分隔符,Chinese parts: 跳过分隔符
5082,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,253,,循环切分规则压入数组,,(consumeTo(elementsType)) { //循环切分规则压入数组,Chinese parts: 循环切分规则压入数组
5083,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,255,,跳过分隔符,,pos += step //跳过分隔符,Chinese parts: 跳过分隔符
5084,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,258,,将剩余字段压入数组末尾,,ule += queue.substring(pos) //将剩余字段压入数组末尾,Chinese parts: 将剩余字段压入数组末尾
5085,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,263,,先匹配到,,if (st > end) { //先匹配到st1pos，表明分隔字串不在选择器中，将选择器前分隔字串分,Chinese parts: 先匹配到
5086,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,263,,表明分隔字串不在选择器中,,if (st > end) { //先匹配到st1pos，表明分隔字串不在选择器中，将选择器前分隔字串分隔的字段依次压入数组,Chinese parts: 表明分隔字串不在选择器中
5087,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,263,,将选择器前分隔字串分隔的字段依次压入数组,,) { //先匹配到st1pos，表明分隔字串不在选择器中，将选择器前分隔字串分隔的字段依次压入数组,Chinese parts: 将选择器前分隔字串分隔的字段依次压入数组
5088,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,265,,压入分隔的首段规则到数组,,"eue.substring(startX, end)) //压入分隔的首段规则到数组",Chinese parts: 压入分隔的首段规则到数组
5089,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,266,,跳过分隔符,,pos = end + step //跳过分隔符,Chinese parts: 跳过分隔符
5090,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,268,,循环切分规则压入数组,,lementsType) && pos < st) { //循环切分规则压入数组,Chinese parts: 循环切分规则压入数组
5091,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,270,,跳过分隔符,,pos += step //跳过分隔符,Chinese parts: 跳过分隔符
5092,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,275,,首段已匹配,,"splitRule() //首段已匹配,但当前段匹配未完成,调用二段匹配",Chinese parts: 首段已匹配
5093,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,275,,但当前段匹配未完成,,"splitRule() //首段已匹配,但当前段匹配未完成,调用二段匹配",Chinese parts: 但当前段匹配未完成
5094,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,275,,调用二段匹配,,"splitRule() //首段已匹配,但当前段匹配未完成,调用二段匹配",Chinese parts: 调用二段匹配
5095,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,276,,执行到此,,} else { //执行到此，证明后面再无分隔字符,Chinese parts: 执行到此
5096,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,276,,证明后面再无分隔字符,,} else { //执行到此，证明后面再无分隔字符,Chinese parts: 证明后面再无分隔字符
5097,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,277,,将剩余字段压入数组末尾,,ule += queue.substring(pos) //将剩余字段压入数组末尾,Chinese parts: 将剩余字段压入数组末尾
5098,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,282,,位置推移到筛选器处,,pos = st //位置推移到筛选器处,Chinese parts: 位置推移到筛选器处
5099,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,283,,平衡组末尾字符,,e[pos] == '[') ']' else ')' //平衡组末尾字符,Chinese parts: 平衡组末尾字符
5100,source_code,app\src\main\java\io\legado\app\model\analyzeRule\RuleAnalyzer.kt,286,,后未平衡,,"queue.substring(0, start) + ""后未平衡""",Chinese parts: 后未平衡
